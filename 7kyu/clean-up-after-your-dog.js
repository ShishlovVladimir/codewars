// üìå DESCRIPTION:
// –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –≤–ª–∞–¥–µ–Ω–∏–∏ —Å–æ–±–∞–∫–æ–π –∏ —Å–∞–¥–æ–º. –¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è —Å–æ–±—Ä–∞—Ç—å –≤–µ—Å—å —Ö@—Ä—å! :D
//
// –ò–º–µ—è –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤–∞—à —Å–∞–¥, –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ –∏ —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å–æ–±–∞—á—å–∏ cr@p, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ '@'.
//
// –í–∞–º —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–º–æ–∫, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ( bags), –∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—É–º–∫–∏ ( cap).
// –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç bags, —Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∏—á–µ–≥–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å cap.
//
// –í–∞–º –Ω—É–∂–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –≤–∞—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–æ–±—Ä–∞—Ç—å –≤–µ—Å—å –º—É—Å–æ—Ä –∏ —Å–Ω–æ–≤–∞ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π —Å–∞–¥ —á–∏—Å—Ç—ã–º.
//
// –ï—Å–ª–∏ –≤—ã —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç–µ, –≤–µ—Ä–Ω–∏—Ç–µ 'Clean', –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω–∏—Ç–µ 'Cr@p'.
//
// –ù–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã - –µ—Å–ª–∏ –≤–∞—à–∞ —Å–æ–±–∞–∫–∞ –≥–¥–µ-—Ç–æ —Ç–∞–º ( 'D'), –æ–Ω–∞ –æ—á–µ–Ω—å —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞ –Ω–µ–π –Ω–∞–±–ª—é–¥–∞—é—Ç.
// –ï—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º, –≤–∞–º –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è 'Dog!!'.

//–ù–∞–ø—Ä–∏–º–µ—Ä:
//
// bags = 2
// cap = 2
// x (or garden) =
// [[ _ , _ , _ , _ , _ , _ ],
//  [ _ , _ , _ , _ , @ , _ ],
//  [ @ , _ , _ , _ , _ , _ ]]

//‚úÖ SOLUTTION:
function crap(x, bags, cap) {
  let shed = 0;
  for (let i = 0; i < x.length; i++) {
    for (let j = 0; j < x[i].length; j++) {
      if (x[i][j] == `D`) return "Dog!!";
      if (x[i][j] == `@`) shed++;
    }
  }
  return shed <= bags * cap ? `Clean` : "Cr@p";
}

let bags = 2;
let cap = 1;
let x = [
  [`_`, `_`, `_`, `_`, `_`, `_`],
  [`_`, `_`, `_`, `_`, `@`, `_`],
  [`@`, `_`, `_`, `_`, `_`, `_`],
];

console.log(crap(x, bags, cap));
