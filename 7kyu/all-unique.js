// üìå DESCRIPTION:
// –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
// –í–µ—Ä–Ω–∏—Ç–µ true, –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, –∏ false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
// –°—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±–æ–π –∏–∑ 128 —Å–∏–º–≤–æ–ª–æ–≤ ASCII.
// –°–∏–º–≤–æ–ª—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'a' –∏ 'A' —Å—á–∏—Ç–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.

//‚úÖ SOLUTTION:
function hasUniqueChars(str) {
  const unique = [...new Set(str)];
  return unique.length === str.length;
}

console.log(hasUniqueChars(`dk8ajhdkahd8`));
console.log(hasUniqueChars(`5dkmnbvcx1`));
